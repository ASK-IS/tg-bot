import logging
import random
from datetime import datetime, timedelta

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message, ReactionTypeEmoji
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import (ADMIN_CHAT, EMOJI_SET, MAILING_DIALOG, MALREADY_MSG, MREADY_MSG, NOEDITS_MSG, PENDING_MSG, Q_MSG,
                    START_MSG, USERS_COOLDOWN, USERS_TOPICS, WAIT5_MSG, bot)
from utils import AdminFilter, convert_to_mention, get_unique_users, is_spam, retry_func, save_unique_user

router = Router()
admin_router = Router()
admin_router.message.filter(F.chat.type == 'private', AdminFilter())


@router.message(F.text.startswith('/start'), F.chat.type == 'private')
async def start(msg: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await msg.answer(START_MSG, disable_web_page_preview=True)
    save_unique_user(msg.from_user.id)


@router.message(F.text, F.chat.type == 'private')
@router.message(F.audio | F.video_note | F.photo | F.document | F.video | F.voice, F.chat.type == 'private')
async def question(msg: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–º –≤–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    user_id, msg_id = msg.from_user.id, msg.message_id

    question_content = msg.text or msg.caption

    if question_content and not question_content.lower().startswith('–ø–æ–ª—Ç–µ—Ä–≥–µ–π—Å—Ç'):
        if is_spam(question_content):
            if '—Å–ø–∞—Å–∏–±–æ' in question_content.lower():
                await msg.react([ReactionTypeEmoji(emoji='‚ù§')])
                return
            await msg.react([ReactionTypeEmoji(emoji='üëé')])
            return
        if (cd_user := USERS_COOLDOWN.get(user_id)) and datetime.now() < cd_user['last_time'] + timedelta(minutes=5):
            await msg.react([ReactionTypeEmoji(emoji='üôä')])
            if not cd_user['is_msg_sent']:
                await msg.answer(WAIT5_MSG)
                cd_user['is_msg_sent'] = True
            return
    if msg.audio or msg.video_note:
        await msg.react([ReactionTypeEmoji(emoji='üëé')])
        return

    if user_id in USERS_TOPICS and datetime.now() < USERS_TOPICS[user_id]['last_time'] + timedelta(days=1):
        thread_id = USERS_TOPICS[user_id]['topic_id']
    else:
        mention = f'@{msg.from_user.username}' if msg.from_user.username else msg.from_user.full_name
        topic = await bot.create_forum_topic(
            ADMIN_CHAT, f'–í–æ–ø—Ä–æ—Å –æ—Ç {mention}', icon_custom_emoji_id='5379748062124056162'
        )
        thread_id = topic.message_thread_id
    question_content = msg.html_text or msg.caption or ''
    text = Q_MSG.format(convert_to_mention(msg.from_user), question_content, user_id, msg_id)
    if any([msg.photo, msg.document, msg.video, msg.voice]):
        await bot.copy_message(ADMIN_CHAT, user_id, msg_id, thread_id, text)
    else:
        await bot.send_message(ADMIN_CHAT, text, message_thread_id=thread_id)

    USERS_COOLDOWN[user_id] = {'last_time': datetime.now(), 'is_msg_sent': False}
    USERS_TOPICS[user_id] = {'topic_id': thread_id, 'msg_id': msg_id, 'last_time': datetime.now()}

    await msg.react([ReactionTypeEmoji(emoji='üëç')])
    logging.info(f'Question from {user_id} - {msg_id} sent to admin chat')


@router.edited_message(F.text, F.from_user, F.chat.type == 'private')
@router.edited_message(F.caption, F.from_user, F.chat.type == 'private')
async def edit_warning(msg: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –¥–æ—Ö–æ–¥—è—Ç"""
    await msg.answer(NOEDITS_MSG)


@router.message(Command('pending'), F.message_thread_id)
@router.message(Command('—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ'), F.message_thread_id)
@router.message(Command('—Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å'), F.message_thread_id)
async def pending_question(msg: Message):
    """–§–∏–∫—Å–∏—Ä—É–µ—Ç —Ç–æ–ø–∏–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"""
    assert msg.message_thread_id
    await bot.edit_forum_topic(ADMIN_CHAT, msg.message_thread_id, icon_custom_emoji_id='5348436127038579546')

    user_id, msg_id = next(
        ((uid, data['msg_id']) for uid, data in USERS_TOPICS.items() if data['topic_id'] == msg.message_thread_id),
        (None, None),
    )
    emoji_num = random.randint(0, len(EMOJI_SET) - 1)
    board = InlineKeyboardBuilder(
        [[InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å üì§Ô∏è', callback_data=f'send {user_id} {msg_id} {emoji_num}')]]
    )
    await msg.answer(PENDING_MSG.format(EMOJI_SET[emoji_num]), reply_markup=board.as_markup())
    await msg.react([ReactionTypeEmoji(emoji='üëç')])


@router.callback_query(F.data.startswith('send'))
async def send_pending_question(resp: CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≤–∑—è—Ç–æ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ"""
    assert isinstance(resp.message, Message)

    _, user_id, msg_id, emoji_num = resp.data.split()
    await bot.send_message(int(user_id), PENDING_MSG.format(EMOJI_SET[int(emoji_num)]), reply_to_message_id=int(msg_id))
    await resp.message.react([ReactionTypeEmoji(emoji='üëç')])
    await resp.message.edit_reply_markup(reply_markup=None)


@router.message(Command('close'), F.message_thread_id)
@router.message(Command('–∑–∞–∫—Ä—ã—Ç'), F.message_thread_id)
@router.message(Command('–∑–∞–∫—Ä—ã—Ç—å'), F.message_thread_id)
async def close_question(msg: Message):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å"""
    assert msg.message_thread_id

    await bot.edit_forum_topic(ADMIN_CHAT, msg.message_thread_id, icon_custom_emoji_id='5237699328843200968')
    await bot.close_forum_topic(ADMIN_CHAT, msg.message_thread_id)
    await msg.react([ReactionTypeEmoji(emoji='üëç')])


@router.message(Command('reopen'), F.message_thread_id)
@router.message(Command('–ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç'), F.message_thread_id)
@router.message(Command('–ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å'), F.message_thread_id)
async def reopen_question(msg: Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å"""
    assert msg.message_thread_id
    await bot.edit_forum_topic(ADMIN_CHAT, msg.message_thread_id, icon_custom_emoji_id='5379748062124056162')
    await bot.reopen_forum_topic(ADMIN_CHAT, msg.message_thread_id)
    await msg.react([ReactionTypeEmoji(emoji='üëç')])


@router.message(Command('achieve'), F.message_thread_id)
@router.message(Command('—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω'), F.message_thread_id)
@router.message(Command('—Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å'), F.message_thread_id)
async def achieve_question(msg: Message):
    """–û—Ç–º–µ—á–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –∫–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π"""
    assert msg.message_thread_id
    await bot.edit_forum_topic(ADMIN_CHAT, msg.message_thread_id, icon_custom_emoji_id='5309958691854754293')
    await bot.close_forum_topic(ADMIN_CHAT, msg.message_thread_id)
    await msg.react([ReactionTypeEmoji(emoji='üëç')])


@router.message(Command('answer'), F.message_thread_id)
@router.message(Command('–æ—Ç–≤–µ—Ç'), F.message_thread_id)
@router.message(F.reply_to_message, F.message_thread_id, ~F.quote)
async def answer_question(msg: Message):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞"""

    command_flag = msg.text.startswith('/answer') or msg.text.startswith('/–æ—Ç–≤–µ—Ç')

    if msg.reply_to_message.message_id == msg.message_thread_id and not command_flag:
        return
    if msg.text == '/answer':
        await msg.react([ReactionTypeEmoji(emoji='üí©')], True)
        return

    if command_flag:
        answer = msg.html_text.removeprefix('/answer').removeprefix('/–æ—Ç–≤–µ—Ç').strip()
        user_id, msg_id = next(
            ((uid, data['msg_id']) for uid, data in USERS_TOPICS.items() if data['topic_id'] == msg.message_thread_id),
        )
        await bot.send_message(int(user_id), answer, reply_to_message_id=int(msg_id))
    else:
        question_text = msg.reply_to_message.text or msg.reply_to_message.caption
        try:
            user_id, msg_id = map(int, list(filter(lambda s: bool(s), question_text.split('\n')))[-1].split())
        except ValueError:
            return
        await bot.send_message(user_id, msg.html_text, reply_to_message_id=msg_id)

    if user_id in USERS_COOLDOWN:
        del USERS_COOLDOWN[user_id]

    await msg.react([ReactionTypeEmoji(emoji='üëç')])
    logging.info(f'Answer to {user_id} {msg_id} sent')


@admin_router.message(Command('—Ä–∞—Å—Å—ã–ª–∫–∞'), lambda _: not MAILING_DIALOG['is_ready'])
@admin_router.message(Command('mailing'), lambda _: not MAILING_DIALOG['is_ready'])
async def start_mailing_dialog(msg: Message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await msg.answer(MREADY_MSG)
    MAILING_DIALOG['is_ready'] = True
    MAILING_DIALOG['user_id'] = msg.from_user.id

    logging.info('Mailing dialog started')


@admin_router.message(Command('—Ä–∞—Å—Å—ã–ª–∫–∞'), lambda _: MAILING_DIALOG['is_ready'])
@admin_router.message(Command('mailing'), lambda _: MAILING_DIALOG['is_ready'])
async def mailing(msg: Message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–∏ –∑–∞–ø—É—â–µ–Ω–Ω–æ–º –¥–∏–∞–ª–æ–≥–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if MAILING_DIALOG['user_id'] != msg.from_user.id:
        await msg.answer(MALREADY_MSG)

    MAILING_DIALOG['is_ready'] = False

    if not MAILING_DIALOG['msg_ids']:
        await msg.react([ReactionTypeEmoji(emoji='üëå')])
        return

    await msg.react([ReactionTypeEmoji(emoji='‚úçÔ∏è')])
    for user_id in get_unique_users():
        await retry_func(bot.copy_messages, user_id, MAILING_DIALOG['user_id'], MAILING_DIALOG['msg_ids'])
    await msg.react([ReactionTypeEmoji(emoji='üëç')])

    MAILING_DIALOG['msg_ids'] = []
    MAILING_DIALOG['user_id'] = 0

    logging.info('Mailing sent')


@admin_router.message(F.text, lambda _: MAILING_DIALOG['is_ready'])
async def collect_mailing(msg: Message):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    MAILING_DIALOG['msg_ids'].append(msg.message_id)
    await msg.react([ReactionTypeEmoji(emoji='üëÄ')])


# @router.message(Command('ban'), F.message_thread_id)
# async def ban_user(msg: Message):
#     """–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
#     user_id = int(msg.reply_to_message.text.rsplit('\n')[-1].split()[0])

#     ...

#     await msg.react([ReactionTypeEmoji(emoji='üëç')])
#     logging.info(f'User {user_id} banned')
