import asyncio
import string
from datetime import datetime, timedelta

import nltk
from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import Message, ReactionTypeEmoji, User
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

nltk.download('punkt_tab')
nltk.download('stopwords')


def convert_to_mention(user: User):
    """–í—ã—Ç–∞—Å–∫–∏–≤–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ–±—ä–µ–∫—Ç–∞ User"""
    return f'@{user.username}' if user.username else f'<a href="tg://user?id={user.id}">{user.full_name}</a>'


def is_spam(message: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º"""
    message = message.translate(str.maketrans('', '', string.punctuation))  # —É–¥–∞–ª—è–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
    words = word_tokenize(message)  # —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    words = [word for word in words if word.lower() not in stopwords.words('russian')]  # —É–¥–∞–ª—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞

    if not words:
        return True
    if len(words) < 3:
        return True

    return False


router = Router()
ADMIN_CHAT = -1002367372290
START_MSG = '<b>–ü—Ä–∏–≤–µ—Ç! üëãüèº –≠—Ç–æ –±–æ—Ç ITMO STUDENTS!</b>\n\n–û–±—Ä–∞—â–∞–π—Å—è –∫ –Ω–∞–º —Å –∏–¥–µ—è–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏, –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ª—É—á—à–µ, –∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –≤–æ–ª–Ω—É—é—Ç. –ú—ã –æ—Ç –ª–∏—Ü–∞ –ê–∫—Ç–∏–≤–∞ –ò–¢–ú–û —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º —Ç–≤–æ—é –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –µ—ë üöÄ\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –µ—Å–ª–∏ –±–æ—Ç –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫, —Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–≤–æ—ë –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Äî –æ—Å—Ç–∞—ë—Ç—Å—è –∂–¥–∞—Ç—å –æ—Ç–≤–µ—Ç ü§ì\n\n<b>–í–∞–∂–Ω–æ:</b> –º—ã –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∞ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.\n–ó–∞ –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—â–∞–π—Å—è –Ω–∏–∂–µ:\n‚úâÔ∏è <a href="https://helpdesk.itmo.ru/servicedesk/customer/portals">–¶–µ–Ω—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏</a>\nü§ñ <a href="https://t.me/itmolnia_bot">ITMOLNIA BOT</a>\nüë• <a href="https://telegra.ph/Kontakty-po-rutinnym-voprosam-02-12">–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ —Ä—É—Ç–∏–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º</a>'
USERS_COOLDOWN: dict[int, datetime] = {}


@router.message(F.text.startswith('/start'))
async def start(msg: Message):
    await msg.answer(START_MSG)


@router.message(F.text, F.chat.type == 'private')
async def question(msg: Message):
    assert msg.from_user

    if msg.text and not msg.text.lower().startswith('–ø–æ–ª—Ç–µ—Ä–≥–µ–π—Å—Ç'):
        if is_spam(msg.text):
            return
        if (last_time := USERS_COOLDOWN.get(msg.from_user.id)) and datetime.now() < last_time + timedelta(minutes=5):
            await msg.react([ReactionTypeEmoji(emoji='üôä')])
            await msg.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è! üìõ')
            return

    await bot.send_message(
        ADMIN_CHAT,
        f'<b>–í–æ–ø—Ä–æ—Å –æ—Ç {convert_to_mention(msg.from_user)}</b>\n\n{msg.html_text}\n\n<tg-spoiler>{msg.from_user.id} {msg.message_id}</tg-spoiler>',
    )
    USERS_COOLDOWN[msg.from_user.id] = datetime.now()

    await msg.react([ReactionTypeEmoji(emoji='üëç')])
    print(f'Question from {msg.from_user.id} {msg.message_id} sent to admin chat')


@router.message(Command('answer'), F.message_thread_id)
async def answer_question(msg: Message):
    assert msg.message_thread_id

    if msg.text == '/answer':
        await msg.react([ReactionTypeEmoji(emoji='üí©')], True)
        return

    user_id, msg_id = map(int, msg.reply_to_message.text.rsplit('\n')[-1].split())
    await bot.send_message(user_id, msg.html_text.removeprefix('/answer '), reply_to_message_id=msg_id)

    if user_id in USERS_COOLDOWN:
        del USERS_COOLDOWN[user_id]

    await msg.react([ReactionTypeEmoji(emoji='üëç')])
    print(f'Answer to {user_id} {msg_id} sent')


bot = Bot(token='8124549178:AAGoWofJCCLacPiMxcNsPOZoKO0lmGPcJmQ', default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()
dp.include_router(router)


async def main():
    await dp.start_polling(bot, handle_as_tasks=False, allowed_updates=dp.resolve_used_update_types())


asyncio.run(main())
